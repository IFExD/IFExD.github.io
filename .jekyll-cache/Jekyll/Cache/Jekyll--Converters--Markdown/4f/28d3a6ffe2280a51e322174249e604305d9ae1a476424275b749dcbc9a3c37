I"Á¥<h1 id="all-four-predictive-tasks-using-svm">All four predictive tasks using SVM</h1>
<p>In this notebook, we explain to download the dataset and getting started with all the predictive tasks using Support Vector Machine. We will be extracting spectral features, specifically 6 rhythmic features - total power in 6 frequency bands, namely, Delta (0.5-4 Hz), Theta (4-8 Hz), Alpha (8-14 Hz), Beta (14-30 Hz), Low Gamma (30-47 Hz), and High Gamma (47-64 Hz). For preprocessing, we filter EEG first with 0.5 Hz highpass and then remove Artifact with ICA based approach.</p>

<p style="text-align:right; font-weight:bold;">Execute with <br /><a class="reference external image-reference" href="https://mybinder.org/v2/gh/Nikeshbajaj/Notebooks/master?filepath=PhyAAt_Notebooks/Example1_QuickStart_with_SVM.ipynb" target="_blank"><img src="https://mybinder.org/badge_logo.svg" width="150px" /></a></p>

<p><img src="figures/example1_svm_all_tasks.png" /></p>

<h2>Table of Contents<span class="tocSkip"></span></h2>
<div class="toc"><ul class="toc-item"><li><span><a href="#import-libraries" data-toc-modified-id="import-libraries"><span class="toc-item-num">0&nbsp;&nbsp;</span>Import Libraries</a></span></li><li><span><a href="#download-data" data-toc-modified-id="download-Data-1"><span class="toc-item-num">1&nbsp;&nbsp;</span>Download Data</a></span></li><li><span><a href="#locate-the-subject's-file" data-toc-modified-id="locate-the-subject's-file-2"><span class="toc-item-num">2&nbsp;&nbsp;</span>Locate the subject's file</a></span></li><li><span><a href="#loading-data-and-preprocessing" data-toc-modified-id="Loading-data-and-preprocessing-3"><span class="toc-item-num">3&nbsp;&nbsp;</span>Loading data and preprocessing</a></span><ul class="toc-item"><li><span><a href="#create-subj-(obj)-with-data-of-subject=1" data-toc-modified-id="Create-Subj-(obj)-with-data-of-Subject=1-3.1"><span class="toc-item-num">3.1&nbsp;&nbsp;</span>Create Subj (obj) with data of Subject=1</a></span></li><li><span><a href="#filtering---removing-dc" data-toc-modified-id="Filtering---removing-DC-3.2"><span class="toc-item-num">3.2&nbsp;&nbsp;</span>Filtering - removing DC</a></span></li><li><span><a href="#artifact-removal-using-ica--[-~6mins]" data-toc-modified-id="Artifact-removal-using-ICA--[-~6mins]-3.3"><span class="toc-item-num">3.3&nbsp;&nbsp;</span>Artifact removal using ICA  [ ~6mins]</a></span></li></ul></li><li><span><a href="#feature-extraction---rhythmic-features-[~2min]" data-toc-modified-id="Feature-Extraction---Rhythmic-Features-[~2min]-4"><span class="toc-item-num">4&nbsp;&nbsp;</span>Feature Extraction - Rhythmic Features [~2min]</a></span></li><li><span><a href="#predictive-modeling-with-svm" data-toc-modified-id="Predictive-Modeling-with-SVM-5"><span class="toc-item-num">5&nbsp;&nbsp;</span>Predictive Modeling with SVM</a></span><ul class="toc-item"><li><span><a href="#t4-task:-lwr-classification" data-toc-modified-id="T4-Task:-LWR-classification-5.1"><span class="toc-item-num">5.1&nbsp;&nbsp;</span>T4 Task: LWR classification</a></span></li><li><span><a href="#t3-task:-semanticity-classification" data-toc-modified-id="T3-Task:-Semanticity-classification-5.2"><span class="toc-item-num">5.2&nbsp;&nbsp;</span>T3 Task: Semanticity classification</a></span></li><li><span><a href="#t2-task:-noise-level-prediction-:-regression" data-toc-modified-id="T2-Task:-Noise-level-prediction-:-Regression-5.3"><span class="toc-item-num">5.3&nbsp;&nbsp;</span>T2 Task: Noise level prediction : Regression</a></span></li><li><span><a href="#t1-task:-attention-level-prediction:--regression" data-toc-modified-id="T1-Task:-Attention-Level-prediction:--Regression-5.4"><span class="toc-item-num">5.4&nbsp;&nbsp;</span>T1 Task: Attention Level prediction:  Regression</a></span></li></ul></li><li><span><a href="#all-results" data-toc-modified-id="All-results-6"><span class="toc-item-num">6&nbsp;&nbsp;</span>All results</a></span></li></ul></div>

<h2 id="import-libraries">Import libraries</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!pip install phyaat  # if not installed yet
</span>
<span class="kn">import</span> <span class="nn">phyaat</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Version :'</span> <span class="p">,</span><span class="n">phyaat</span><span class="p">.</span><span class="n">__version__</span><span class="p">)</span>
<span class="kn">import</span> <span class="nn">phyaat</span> <span class="k">as</span> <span class="n">ph</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PhyAAt Processing lib Loaded...
Version : 0.0.2
</code></pre></div></div>

<h2 id="download-data">Download Data</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Download dataset of one subject only (subject=1)
# To download data of all the subjects use subject =-1 or for specify for one e.g.subject=10
</span>
<span class="n">dirPath</span> <span class="o">=</span> <span class="n">ph</span><span class="p">.</span><span class="n">download_data</span><span class="p">(</span><span class="n">baseDir</span><span class="o">=</span><span class="s">'../PhyAAt_Data'</span><span class="p">,</span> <span class="n">subject</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">overwrite</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>100%[|][##################################################] S1
</code></pre></div></div>

<h2 id="locate-the-subjects-file">Locate the subjectâ€™s file</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">baseDir</span><span class="o">=</span><span class="s">'../PhyAAt_Data'</span>   <span class="c1"># or dirPath return path from above
</span>
<span class="c1">#returns a dictionary containing file names of all the subjects available in baseDir
</span><span class="n">SubID</span> <span class="o">=</span> <span class="n">ph</span><span class="p">.</span><span class="n">ReadFilesPath</span><span class="p">(</span><span class="n">baseDir</span><span class="p">)</span>

<span class="c1">#check files of subject=1
</span><span class="n">SubID</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Total Subjects :  1

{'sigFile': '../PhyAAt_Data/phyaat_dataset/Signals/S1/S1_Signals.csv',
 'txtFile': '../PhyAAt_Data/phyaat_dataset/Signals/S1/S1_Textscore.csv'}
</code></pre></div></div>

<h2 id="loading-data-and-preprocessing">Loading data and preprocessing</h2>

<h3 id="create-subj-obj-with-data-of-subject1">Create Subj (obj) with data of Subject=1</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create a Subj holding dataset of subject=1
</span>
<span class="n">Subj</span> <span class="o">=</span> <span class="n">ph</span><span class="p">.</span><span class="n">Subject</span><span class="p">(</span><span class="n">SubID</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div>

<h3 id="filtering---removing-dc">Filtering - removing DC</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#filtering with highpass filter of cutoff frequency 0.5Hz
</span>
<span class="n">Subj</span><span class="p">.</span><span class="n">filter_EEG</span><span class="p">(</span><span class="n">band</span> <span class="o">=</span><span class="p">[</span><span class="mf">0.5</span><span class="p">],</span><span class="n">btype</span><span class="o">=</span><span class="s">'highpass'</span><span class="p">,</span><span class="n">order</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="artifact-removal-using-ica---6mins">Artifact removal using ICA  [ ~6mins]</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Remving Artifact using ICA, setting window size to 1280 (10sec), which is larg, but takes less time
</span>
<span class="n">Subj</span><span class="p">.</span><span class="n">correct</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="s">'ICA'</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">winsize</span><span class="o">=</span><span class="mi">128</span><span class="o">*</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ICA Artifact Removal : extended-infomax
100%|####################################################################################################|
</code></pre></div></div>

<h2 id="feature-extraction---rhythmic-features-2min">Feature Extraction - Rhythmic Features [~2min]</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># setting task=-1, does extract the features from all the segmensts for all the four tasks and
# returns y_train as (n,4), one coulum for each task. Next time extracting Xy for any particular
# task won't extract the features agains, unless you force it by setting 'redo'=True.
</span>
<span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">,</span><span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">Subj</span><span class="p">.</span><span class="n">getXy_eeg</span><span class="p">(</span><span class="n">task</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'DataShape: '</span><span class="p">,</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span><span class="n">y_train</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">y_test</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>100%|##################################################|100\100|Sg - 0
Done..
100%|##################################################|100\100|Sg - 1
Done..
100%|##################################################|100\100|Sg - 2
Done..
100%|##################################################|43\43|Sg - 0
Done..
100%|##################################################|43\43|Sg - 1
Done..
100%|##################################################|43\43|Sg - 2
Done..
DataShape:  (290, 84) (290, 4) (120, 84) (120, 4)
</code></pre></div></div>

<h2 id="predictive-modeling-with-svm">Predictive Modeling with SVM</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">svm</span>
</code></pre></div></div>

<h3 id="t4-task-lwr-classification">T4 Task: LWR classification</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span><span class="n">y_test</span> <span class="o">=</span> <span class="n">Subj</span><span class="p">.</span><span class="n">getXy_eeg</span><span class="p">(</span><span class="n">task</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'DataShape: '</span><span class="p">,</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span><span class="n">y_train</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">y_test</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">Class labels :'</span><span class="p">,</span><span class="n">np</span><span class="p">.</span><span class="n">unique</span><span class="p">(</span><span class="n">y_train</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DataShape:  (290, 84) (290,) (120, 84) (120,)

Class labels : [0 1 2]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Normalization - SVM works well with normalized features
</span><span class="n">means</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">std</span>   <span class="o">=</span> <span class="n">X_train</span><span class="p">.</span><span class="n">std</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">X_train</span> <span class="o">=</span> <span class="p">(</span><span class="n">X_train</span><span class="o">-</span><span class="n">means</span><span class="p">)</span><span class="o">/</span><span class="n">std</span>
<span class="n">X_test</span>  <span class="o">=</span> <span class="p">(</span><span class="n">X_test</span><span class="o">-</span><span class="n">means</span><span class="p">)</span><span class="o">/</span><span class="n">std</span>


<span class="c1"># Training
</span><span class="n">clf</span> <span class="o">=</span> <span class="n">svm</span><span class="p">.</span><span class="n">SVC</span><span class="p">(</span><span class="n">kernel</span><span class="o">=</span><span class="s">'rbf'</span><span class="p">,</span> <span class="n">C</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">gamma</span><span class="o">=</span><span class="s">'auto'</span><span class="p">)</span>
<span class="n">clf</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">)</span>

<span class="c1"># Predition
</span><span class="n">ytp</span> <span class="o">=</span> <span class="n">clf</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
<span class="n">ysp</span> <span class="o">=</span> <span class="n">clf</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>

<span class="c1"># Evaluation
</span><span class="n">T4_trac</span> <span class="o">=</span>  <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">y_train</span><span class="o">==</span><span class="n">ytp</span><span class="p">)</span>
<span class="n">T4_tsac</span> <span class="o">=</span>  <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">y_test</span><span class="o">==</span><span class="n">ysp</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Training Accuracy:'</span><span class="p">,</span><span class="n">T4_trac</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Testing  Accuracy:'</span><span class="p">,</span><span class="n">T4_tsac</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Training Accuracy: 0.9551724137931035
Testing  Accuracy: 0.875
</code></pre></div></div>

<h3 id="t3-task-semanticity-classification">T3 Task: Semanticity classification</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span><span class="n">y_test</span> <span class="o">=</span> <span class="n">Subj</span><span class="p">.</span><span class="n">getXy_eeg</span><span class="p">(</span><span class="n">task</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'DataShape: '</span><span class="p">,</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span><span class="n">y_train</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">y_test</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">Class labels :'</span><span class="p">,</span><span class="n">np</span><span class="p">.</span><span class="n">unique</span><span class="p">(</span><span class="n">y_train</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DataShape:  (100, 84) (100,) (43, 84) (43,)

Class labels : [0 1]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Normalization - SVM works well with normalized features
</span><span class="n">means</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">std</span>   <span class="o">=</span> <span class="n">X_train</span><span class="p">.</span><span class="n">std</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">X_train</span> <span class="o">=</span> <span class="p">(</span><span class="n">X_train</span><span class="o">-</span><span class="n">means</span><span class="p">)</span><span class="o">/</span><span class="n">std</span>
<span class="n">X_test</span>  <span class="o">=</span> <span class="p">(</span><span class="n">X_test</span><span class="o">-</span><span class="n">means</span><span class="p">)</span><span class="o">/</span><span class="n">std</span>


<span class="c1"># Training
</span><span class="n">clf</span> <span class="o">=</span> <span class="n">svm</span><span class="p">.</span><span class="n">SVC</span><span class="p">(</span><span class="n">kernel</span><span class="o">=</span><span class="s">'rbf'</span><span class="p">,</span> <span class="n">C</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">gamma</span><span class="o">=</span><span class="s">'auto'</span><span class="p">)</span>
<span class="n">clf</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">)</span>

<span class="c1"># Predition
</span><span class="n">ytp</span> <span class="o">=</span> <span class="n">clf</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
<span class="n">ysp</span> <span class="o">=</span> <span class="n">clf</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>


<span class="c1"># Evaluation
</span><span class="n">T3_trac</span> <span class="o">=</span>  <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">y_train</span><span class="o">==</span><span class="n">ytp</span><span class="p">)</span>
<span class="n">T3_tsac</span> <span class="o">=</span>  <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">y_test</span><span class="o">==</span><span class="n">ysp</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Training Accuracy:'</span><span class="p">,</span><span class="n">T3_trac</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Testing  Accuracy:'</span><span class="p">,</span><span class="n">T3_tsac</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Training Accuracy: 0.86
Testing  Accuracy: 0.6046511627906976
</code></pre></div></div>

<h3 id="t2-task-noise-level-prediction--regression">T2 Task: Noise level prediction : Regression</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span><span class="n">y_test</span> <span class="o">=</span> <span class="n">Subj</span><span class="p">.</span><span class="n">getXy_eeg</span><span class="p">(</span><span class="n">task</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'DataShape: '</span><span class="p">,</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span><span class="n">y_train</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">y_test</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">Noise levels     :'</span><span class="p">,</span><span class="n">np</span><span class="p">.</span><span class="n">unique</span><span class="p">(</span><span class="n">y_train</span><span class="p">))</span>

<span class="c1">#change 1000 dB to 10 dB
</span><span class="n">y_train</span><span class="p">[</span><span class="n">y_train</span><span class="o">==</span><span class="mi">1000</span><span class="p">]</span><span class="o">=</span><span class="mi">10</span>
<span class="n">y_test</span><span class="p">[</span><span class="n">y_test</span><span class="o">==</span><span class="mi">1000</span><span class="p">]</span><span class="o">=</span><span class="mi">10</span>

<span class="k">print</span><span class="p">(</span><span class="s">'New Noise levels :'</span><span class="p">,</span><span class="n">np</span><span class="p">.</span><span class="n">unique</span><span class="p">(</span><span class="n">y_train</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DataShape:  (100, 84) (100,) (43, 84) (43,)

Noise levels     : [  -6   -3    0    3    6 1000]
New Noise levels : [-6 -3  0  3  6 10]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Normalization - SVM works well with normalized features
</span><span class="n">means</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">std</span>   <span class="o">=</span> <span class="n">X_train</span><span class="p">.</span><span class="n">std</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">X_train</span> <span class="o">=</span> <span class="p">(</span><span class="n">X_train</span><span class="o">-</span><span class="n">means</span><span class="p">)</span><span class="o">/</span><span class="n">std</span>
<span class="n">X_test</span>  <span class="o">=</span> <span class="p">(</span><span class="n">X_test</span><span class="o">-</span><span class="n">means</span><span class="p">)</span><span class="o">/</span><span class="n">std</span>


<span class="c1"># Training
</span><span class="n">clf</span> <span class="o">=</span> <span class="n">svm</span><span class="p">.</span><span class="n">SVR</span><span class="p">(</span><span class="n">kernel</span><span class="o">=</span><span class="s">'rbf'</span><span class="p">,</span> <span class="n">C</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">gamma</span><span class="o">=</span><span class="s">'auto'</span><span class="p">)</span>
<span class="n">clf</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">)</span>

<span class="c1"># Predition
</span><span class="n">ytp</span> <span class="o">=</span> <span class="n">clf</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
<span class="n">ysp</span> <span class="o">=</span> <span class="n">clf</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>

<span class="c1"># Evaluation
</span><span class="n">T2_tre</span> <span class="o">=</span>  <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">y_train</span><span class="o">-</span><span class="n">ytp</span><span class="p">))</span>
<span class="n">T2_tse</span> <span class="o">=</span>  <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">y_test</span><span class="o">-</span><span class="n">ysp</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Training MAE:'</span><span class="p">,</span><span class="n">T2_tre</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Testing  MAE:'</span><span class="p">,</span><span class="n">T2_tse</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Training MAE: 3.9959210189119596
Testing  MAE: 4.692983467091375
</code></pre></div></div>

<h3 id="t1-task-attention-level-prediction--regression">T1 Task: Attention Level prediction:  Regression</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span><span class="n">y_test</span> <span class="o">=</span> <span class="n">Subj</span><span class="p">.</span><span class="n">getXy_eeg</span><span class="p">(</span><span class="n">task</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'DataShape: '</span><span class="p">,</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span><span class="n">y_train</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">y_test</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">Attention levels:</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span><span class="n">np</span><span class="p">.</span><span class="n">unique</span><span class="p">(</span><span class="n">y_train</span><span class="p">))</span>

<span class="c1"># Round off around 10
</span>
<span class="n">y_train</span> <span class="o">=</span> <span class="mi">10</span><span class="o">*</span><span class="p">(</span><span class="n">y_train</span><span class="o">//</span><span class="mi">10</span><span class="p">)</span>
<span class="n">y_test</span> <span class="o">=</span> <span class="mi">10</span><span class="o">*</span><span class="p">(</span><span class="n">y_test</span><span class="o">//</span><span class="mi">10</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">New Attention levels:</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span><span class="n">np</span><span class="p">.</span><span class="n">unique</span><span class="p">(</span><span class="n">y_train</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DataShape:  (100, 84) (100,) (43, 84) (43,)

Attention levels:
 [  0   7  12  14  15  18  20  22  25  28  33  37  38  42  44  45  46  50
  54  60  62  66  71  72  75  76  80  83  85  87  88 100]

New Attention levels:
 [  0  10  20  30  40  50  60  70  80 100]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Normalization - SVM works well with normalized features
</span><span class="n">means</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">std</span>   <span class="o">=</span> <span class="n">X_train</span><span class="p">.</span><span class="n">std</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">X_train</span> <span class="o">=</span> <span class="p">(</span><span class="n">X_train</span><span class="o">-</span><span class="n">means</span><span class="p">)</span><span class="o">/</span><span class="n">std</span>
<span class="n">X_test</span>  <span class="o">=</span> <span class="p">(</span><span class="n">X_test</span><span class="o">-</span><span class="n">means</span><span class="p">)</span><span class="o">/</span><span class="n">std</span>


<span class="c1"># Training
</span><span class="n">clf</span> <span class="o">=</span> <span class="n">svm</span><span class="p">.</span><span class="n">SVR</span><span class="p">(</span><span class="n">kernel</span><span class="o">=</span><span class="s">'rbf'</span><span class="p">,</span> <span class="n">C</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">gamma</span><span class="o">=</span><span class="s">'auto'</span><span class="p">)</span>
<span class="n">clf</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">)</span>

<span class="c1"># Predition
</span><span class="n">ytp</span> <span class="o">=</span> <span class="n">clf</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
<span class="n">ysp</span> <span class="o">=</span> <span class="n">clf</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>

<span class="c1"># Evaluation
</span><span class="n">T1_tre</span> <span class="o">=</span>  <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">y_train</span><span class="o">-</span><span class="n">ytp</span><span class="p">))</span>
<span class="n">T1_tse</span> <span class="o">=</span>  <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">y_test</span><span class="o">-</span><span class="n">ysp</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Training MAE:'</span><span class="p">,</span><span class="n">T1_tre</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Testing  MAE:'</span><span class="p">,</span><span class="n">T1_tse</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Training MAE: 30.318536004889328
Testing  MAE: 32.7156301374038
</code></pre></div></div>

<h2 id="all-results">All results</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">141</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="n">T1_tre</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="n">T1_tse</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlim</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">([])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'T1: Attention Level'</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">13</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'MAE'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">142</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="n">T2_tre</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="n">T2_tse</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">([])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'T2: Noise Level'</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">13</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'MAE'</span><span class="p">)</span>


<span class="n">plt</span><span class="p">.</span><span class="n">xlim</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">143</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="n">T3_trac</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="n">T3_tsac</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">([])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'T3: Semanticity'</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">13</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Accuracy'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">xlim</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">144</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="n">T4_trac</span><span class="p">],</span><span class="n">label</span><span class="o">=</span><span class="s">'Training'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="n">T4_tsac</span><span class="p">],</span><span class="n">label</span><span class="o">=</span><span class="s">'Testing'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlim</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">([])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'T4: LWR'</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">13</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Accuracy'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">bbox_to_anchor</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">subplots_adjust</span><span class="p">(</span><span class="n">wspace</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">suptitle</span><span class="p">(</span><span class="s">"Predictive Tasks with SVM"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="s">"x-large"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="figures/example1_svm_all_tasks.png" alt="png" /></p>

<p style="text-align:center; font-weight:bold;">Execute with <br /><a class="reference external image-reference" href="https://mybinder.org/v2/gh/Nikeshbajaj/Notebooks/master?filepath=PhyAAt_Notebooks/Example1_QuickStart_with_SVM.ipynb" target="_blank"><img src="https://mybinder.org/badge_logo.svg" width="150px" /></a></p>
:ET