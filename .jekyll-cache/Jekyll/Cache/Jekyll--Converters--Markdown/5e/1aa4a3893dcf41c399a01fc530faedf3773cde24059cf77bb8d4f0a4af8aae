I"ë8<h1 id="tuning-the-preprocessing">Tuning the preprocessing</h1>

<p>In this notebook, we explain how to tune the preprocessing steps with available options in phyaat library.
Basically two preprocessing steps are provided, filtering and artifact removal. For filtering, conventional way is to filter EEG with highpass filter (0.5 Hz), however you could choose any range. Second Artifact Removal, currently onle one method of artifact removal is implemented in phyaat, feel free to choose external libraries such as mne. The ICA based approach has a few hyperparameters, such as method to compute IC components, windowsize to process, threshold of kurtosis and correlation coefficient. We will see how to do that.</p>

<p style="text-align:right; font-weight:bold;">Execute with <br /><a class="reference external image-reference" href="https://mybinder.org/v2/gh/Nikeshbajaj/Notebooks/master?filepath=PhyAAt_Notebooks/Example2_Tuning_Preprocessing.ipynb" target="_blank"><img src="https://mybinder.org/badge_logo.svg" width="150px" /></a></p>

<h2>Table of Contents<span class="tocSkip"></span></h2>
<div class="toc"><ul class="toc-item"><li><span><a href="#Read-the-data-of-subject=1" data-toc-modified-id="Read-the-data-of-subject=1-1"><span class="toc-item-num">1&nbsp;&nbsp;</span>Read the data of subject=1</a></span></li><li><span><a href="#Filtering" data-toc-modified-id="Filtering-2"><span class="toc-item-num">2&nbsp;&nbsp;</span>Filtering</a></span></li><li><span><a href="#Artifact-removal-using-ICA" data-toc-modified-id="Artifact-removal-using-ICA-3"><span class="toc-item-num">3&nbsp;&nbsp;</span>Artifact removal using ICA</a></span></li><li><span><a href="#T3:-Semanticity-Classification" data-toc-modified-id="T3:-Semanticity-Classification-4"><span class="toc-item-num">4&nbsp;&nbsp;</span>T3: Semanticity Classification</a></span></li></ul></div>

<h2 id="import-libraries">Import libraries</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">svm</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">phyaat</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Version :'</span> <span class="p">,</span><span class="n">phyaat</span><span class="p">.</span><span class="n">__version__</span><span class="p">)</span>
<span class="kn">import</span> <span class="nn">phyaat</span> <span class="k">as</span> <span class="n">ph</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PhyAAt Processing lib Loaded...
Version : 0.0.2
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#help(ph.Subject.getXy_eeg)
</span></code></pre></div></div>

<h2 id="read-the-data-of-subject1">Read the data of subject=1</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dirPath</span> <span class="o">=</span> <span class="n">ph</span><span class="p">.</span><span class="n">download_data</span><span class="p">(</span><span class="n">baseDir</span><span class="o">=</span><span class="s">'../PhyAAt_Data'</span><span class="p">,</span> <span class="n">subject</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">overwrite</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="n">baseDir</span><span class="o">=</span><span class="s">'../PhyAAt_Data'</span>

<span class="n">SubID</span> <span class="o">=</span> <span class="n">ph</span><span class="p">.</span><span class="n">ReadFilesPath</span><span class="p">(</span><span class="n">baseDir</span><span class="p">)</span>

<span class="n">Subj</span> <span class="o">=</span> <span class="n">ph</span><span class="p">.</span><span class="n">Subject</span><span class="p">(</span><span class="n">SubID</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Total Subjects :  1
</code></pre></div></div>

<h2 id="filtering">Filtering</h2>
<p><strong>With Custum frequency range</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Subj</span><span class="p">.</span><span class="n">filter_EEG</span><span class="p">(</span><span class="n">band</span> <span class="o">=</span><span class="p">[</span><span class="mf">0.5</span><span class="p">,</span><span class="mi">40</span><span class="p">],</span><span class="n">btype</span><span class="o">=</span><span class="s">'bandpass'</span><span class="p">,</span><span class="n">order</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="artifact-removal-using-ica">Artifact removal using ICA</h2>
<p><strong>Tune threshold, windowsize, ICA method</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">KurThr</span> <span class="o">=</span> <span class="mf">1.5</span>
<span class="n">Corr</span>   <span class="o">=</span> <span class="mf">0.7</span>
<span class="n">ICAMed</span> <span class="o">=</span> <span class="s">'infomax'</span> <span class="c1">#picard, fastICA
</span><span class="n">winsize</span><span class="o">=</span><span class="mi">128</span><span class="o">*</span><span class="mi">20</span> <span class="c1"># 20sec
</span>
<span class="n">Subj</span><span class="p">.</span><span class="n">correct</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="s">'ICA'</span><span class="p">,</span><span class="n">winsize</span><span class="o">=</span><span class="n">winsize</span><span class="p">,</span><span class="n">hopesize</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">Corr</span><span class="o">=</span><span class="n">Corr</span><span class="p">,</span><span class="n">KurThr</span><span class="o">=</span><span class="n">KurThr</span><span class="p">,</span>
             <span class="n">ICAMed</span><span class="o">=</span><span class="n">ICAMed</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
             <span class="n">window</span><span class="o">=</span><span class="p">[</span><span class="s">'hamming'</span><span class="p">,</span><span class="bp">True</span><span class="p">],</span><span class="n">winMeth</span><span class="o">=</span><span class="s">'custom'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ICA Artifact Removal : infomax
100%|########################################################|
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Check help for details
</span><span class="n">help</span><span class="p">(</span><span class="n">ph</span><span class="p">.</span><span class="n">Subject</span><span class="p">.</span><span class="n">correct</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Help on function correct in module phyaat.ProcessingLib:

correct(self, method='ICA', winsize=128, hopesize=None, Corr=0.8, KurThr=2,
ICAMed='extended-infomax', verbose=0, window=['hamming', True], winMeth='custom')
    method: 'ICA', ('WPA', 'ATAR' ) - not yet updated to library
    ICAMed: ['fastICA','infomax','extended-infomax','picard']
    winsize: 128, window size to processe
    hopesize: 64, overlapping samples, if None, hopesize=winsize//2
    window: ['hamming',True], window[1]=False to avoid windowing,  

    KurThr: (2) threshold on kurtosis to eliminate artifact,
    ICA component with kurtosis above threshold are removed.
    Corr = 0.8, correlation threshold, above which ica components are removed.
</code></pre></div></div>

<h2 id="t3-semanticity-classification">T3: Semanticity Classification</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># setting task=-1, does extract the features from all the segmensts for all the four tasks and
# returns y_train as (n,4), one coulum for each task. Next time extracting Xy for any particular
# task won't extract the features agains, unless you force it by setting 'redo'=True.
</span>
<span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">,</span><span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">Subj</span><span class="p">.</span><span class="n">getXy_eeg</span><span class="p">(</span><span class="n">task</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'DataShape: '</span><span class="p">,</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span><span class="n">y_train</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">y_test</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">Class labels :'</span><span class="p">,</span><span class="n">np</span><span class="p">.</span><span class="n">unique</span><span class="p">(</span><span class="n">y_train</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>100%|##################################################|100\100|Sg - 0
Done..
100%|##################################################|43\43|Sg - 0
Done..
DataShape:  (100, 84) (100,) (43, 84) (43,)

Class labels : [0 1]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Normalization - SVM works well with normalized features
</span><span class="n">means</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">std</span>   <span class="o">=</span> <span class="n">X_train</span><span class="p">.</span><span class="n">std</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">X_train</span> <span class="o">=</span> <span class="p">(</span><span class="n">X_train</span><span class="o">-</span><span class="n">means</span><span class="p">)</span><span class="o">/</span><span class="n">std</span>
<span class="n">X_test</span>  <span class="o">=</span> <span class="p">(</span><span class="n">X_test</span><span class="o">-</span><span class="n">means</span><span class="p">)</span><span class="o">/</span><span class="n">std</span>


<span class="c1"># Training
</span><span class="n">clf</span> <span class="o">=</span> <span class="n">svm</span><span class="p">.</span><span class="n">SVC</span><span class="p">(</span><span class="n">kernel</span><span class="o">=</span><span class="s">'rbf'</span><span class="p">,</span> <span class="n">C</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">gamma</span><span class="o">=</span><span class="s">'auto'</span><span class="p">)</span>
<span class="n">clf</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">)</span>

<span class="c1"># Predition
</span><span class="n">ytp</span> <span class="o">=</span> <span class="n">clf</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
<span class="n">ysp</span> <span class="o">=</span> <span class="n">clf</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>

<span class="c1"># Evaluation
</span><span class="k">print</span><span class="p">(</span><span class="s">'Training Accuracy:'</span><span class="p">,</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">y_train</span><span class="o">==</span><span class="n">ytp</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Testing  Accuracy:'</span><span class="p">,</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">y_test</span><span class="o">==</span><span class="n">ysp</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Training Accuracy: 0.88
Testing  Accuracy: 0.6046511627906976
</code></pre></div></div>

<p style="text-align:center; font-weight:bold;">Execute with <br /><a class="reference external image-reference" href="https://mybinder.org/v2/gh/Nikeshbajaj/Notebooks/master?filepath=PhyAAt_Notebooks/Example2_Tuning_Preprocessing.ipynb" target="_blank"><img src="https://mybinder.org/badge_logo.svg" width="150px" /></a></p>
:ET